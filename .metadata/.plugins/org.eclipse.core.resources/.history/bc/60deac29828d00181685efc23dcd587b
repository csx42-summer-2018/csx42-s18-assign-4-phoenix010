package maxKVisitors.util;


import java.util.ArrayList;
import java.util.Arrays;
import java.util.Vector;

import maxKVisitors.util2.HeapSort;
import maxKVisitors.util2.HeapVisitor;

public class MaxHeapVisitor implements HeapVisitor{

	private int[] heap;
	private int size;
	
	public MaxHeapVisitor(ArrayList<Integer> myArr) {
		this.size= myArr.size();
		this.heap = new int[size];
		for(int i=0; i<  myArr.size(); i++) {
			 this.heap[i] = myArr.get(i).intValue();
		}
	}
	
	
	public MaxHeapVisitor(Vector <Integer> vector) {
		this.size = vector.size();
		this.heap = new int[size];
		for(int i=0; i<vector.size(); i++) {
			 heap[i] = vector.get(i).intValue();
		}
	}
	


	public int[] getHeap() {
		return heap;
	}

	public int getSize() {
		return size;
	}

	@Override
	public int[] visitHeap(MyVector vector) {
		HeapSort heapSort = new HeapSort();
		int [] result = heapSort.sort(heap);
		result = reverseArray(result,0,(result.length-1));
		return result;
	}

	@Override
	public int[] visitHeap(MyArray myArr) {
		
			HeapSort heapSort = new HeapSort();
			int [] result = heapSort.sort(heap);
			result = reverseArray(result,0,(result.length-1));
			return result;
//			MaxHeap maxheap = new MaxHeap(heap);
//			return maxheap.extractMax();
	}
	
	public int[] reverseArray(int arr[],int firstIndex, int lastIndex) {	
			int temp;
  
			while (firstIndex < lastIndex)
				{
					temp = arr[firstIndex]; 
					arr[firstIndex] = arr[lastIndex];
					arr[lastIndex] = temp;
					firstIndex++;
					lastIndex--;	
				} 
			return arr;
	} 
}


